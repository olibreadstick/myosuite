diff --git a/myosuite/envs/myo/myowheelchair/myowheelchairleft/render.py b/myosuite/envs/myo/myowheelchair/myowheelchairleft/render.py
index f84e100..3d56ceb 100644
--- a/myosuite/envs/myo/myowheelchair/myowheelchairleft/render.py
+++ b/myosuite/envs/myo/myowheelchair/myowheelchairleft/render.py
@@ -13,13 +13,14 @@ if __name__ == "__main__":
     env = gym.make('myoHandWheelHoldFixed-v0_left')
     env.reset()
 
+
     model = PPO("MlpPolicy", env, verbose=0)
     pi = PPO.load(r"/Users/oliviacardillo/myosuite/myosuite3/MPL_baselines_left/policy_best_model_left/myoHandWheelHoldFixed-v0_left/2025_07_29_14_15_27/best_model.zip")
 
     # render
     frames = []
     for _ in range(800):
-        frames.append(env.sim.renderer.render_offscreen(width=400, height=400, camera_id=0)) 
+        frames.append(env.sim.renderer.render_offscreen(width=400, height=400, camera_id=1)) 
         o = env.get_obs()
         a = pi.predict(o)[0]
         next_o, r, done, *_, ifo = env.step(
diff --git a/myosuite/envs/myo/myowheelchair/myowheelchairleft/videos/HandFocusedRender.mp4 b/myosuite/envs/myo/myowheelchair/myowheelchairleft/videos/HandFocusedRender.mp4
index e4cc17f..ccac50b 100644
Binary files a/myosuite/envs/myo/myowheelchair/myowheelchairleft/videos/HandFocusedRender.mp4 and b/myosuite/envs/myo/myowheelchair/myowheelchairleft/videos/HandFocusedRender.mp4 differ
diff --git a/myosuite/envs/myo/myowheelchair/myowheelchairleft/wheelhold_v0.py b/myosuite/envs/myo/myowheelchair/myowheelchairleft/wheelhold_v0.py
index 41c032a..6aebd1e 100644
--- a/myosuite/envs/myo/myowheelchair/myowheelchairleft/wheelhold_v0.py
+++ b/myosuite/envs/myo/myowheelchair/myowheelchairleft/wheelhold_v0.py
@@ -25,6 +25,17 @@ class WheelHoldFixedEnvV0Left(BaseV0):
 
         "bonus": 1.0, 
         "penalty": 1.0,
+
+        "return_rwd_l": 30.0,
+        "hand_err_rwd_l": 10.0,
+
+        "dist_reward_l": 5.0,
+        "palm_touch_rwd_l": 5.0,
+        "wheel_rotation_l": 25.0,
+        "fin_open_l": -2.0,
+
+        "bonus_l": 1.0, 
+        "penalty_l": 1.0,
     }
 
     def __init__(self, model_path, obsd_model_path=None, seed=None, **kwargs):
@@ -59,20 +70,46 @@ class WheelHoldFixedEnvV0Left(BaseV0):
         # hand target position, start returning when reached
         self.hand_TARGET_left = self.sim.model.site_name2id("hand_TARGET_left") #blue, STATIC
 
+        # self.goal_sid_right = self.sim.model.site_name2id("wheelchair_grip_right") #green, movable
+        self.palm_r = self.sim.model.site_name2id("palm_r")
+        self.hand_start_right = self.sim.model.site_name2id("hand_start_right") #red, static
+        # self.rail_bottom_right = self.sim.model.site_name2id("rail_bottom_right") #blue, movable
+        
+        # hand target position, start returning when reached
+        self.hand_TARGET_right = self.sim.model.site_name2id("hand_TARGET_right") #blue, STATIC
+
+
+
         # define the palm and tip site id.
         # self.palm_r = self.sim.model.site_name2id('S_grasp')
-        self.init_palm_z = self.sim.data.site_xpos[self.palm_l][-1]
-        self.fin0 = self.sim.model.site_name2id("THtipL")
-        self.fin1 = self.sim.model.site_name2id("IFtipL")
-        self.fin2 = self.sim.model.site_name2id("MFtipL")
-        self.fin3 = self.sim.model.site_name2id("RFtipL")
-        self.fin4 = self.sim.model.site_name2id("LFtipL")
-
-        self.wheel_joint_id = self.sim.model.joint_name2id("left_rear") #right wheel joint
+        self.init_palm_z_l = self.sim.data.site_xpos[self.palm_l][-1]
+        self.fin0_l = self.sim.model.site_name2id("THtipL")
+        self.fin1_l = self.sim.model.site_name2id("IFtipL")
+        self.fin2_l = self.sim.model.site_name2id("MFtipL")
+        self.fin3_l = self.sim.model.site_name2id("RFtipL")
+        self.fin4_l = self.sim.model.site_name2id("LFtipL")
+
+        # define the palm and tip site id.
+        # self.palm_r = self.sim.model.site_name2id('S_grasp')
+        self.init_palm_z = self.sim.data.site_xpos[self.palm_r][-1]
+        self.fin0 = self.sim.model.site_name2id("THtip")
+        self.fin1 = self.sim.model.site_name2id("IFtip")
+        self.fin2 = self.sim.model.site_name2id("MFtip")
+        self.fin3 = self.sim.model.site_name2id("RFtip")
+        self.fin4 = self.sim.model.site_name2id("LFtip")
+
+        self.wheel_joint_id_l = self.sim.model.joint_name2id("left_rear") #right wheel joint
+        self.init_wheel_angle_l = self.sim.data.qpos[self.wheel_joint_id].copy() #INIITAL wheel angle
+
+        self.wheel_joint_id = self.sim.model.joint_name2id("right_rear") #right wheel joint
         self.init_wheel_angle = self.sim.data.qpos[self.wheel_joint_id].copy() #INIITAL wheel angle
 
+
+        #elbow jnt
+        self.elbow_joint_id = self.sim.model.joint_name2id("elbow_flexion")
+
         #elbow jnt
-        self.elbow_joint_id = self.sim.model.joint_name2id("elbow_flexionL")
+        self.elbow_joint_id_l = self.sim.model.joint_name2id("elbow_flexionL")
 
         #phases check
         self.task_phase = "push"
@@ -91,26 +128,44 @@ class WheelHoldFixedEnvV0Left(BaseV0):
         self.obs_dict['hand_qpos'] = self.sim.data.qpos[13:].copy()
         self.obs_dict['hand_qvel'] = self.sim.data.qvel[12:].copy()*self.dt
 
+        self.obs_dict['time'] = np.array([self.sim.data.time])
+        self.obs_dict['hand_qpos_l'] = self.sim.data.qpos[13:].copy()
+        self.obs_dict['hand_qvel_l'] = self.sim.data.qvel[12:].copy()*self.dt
+
         # self.obs_dict['wheel_err_right'] = self.sim.data.site_xpos[self.goal_sid_right] - self.sim.data.site_xpos[self.palm_r]
         # self.obs_dict['hand_initpos_err_right'] = self.sim.data.site_xpos[self.hand_start_right]- self.sim.data.site_xpos[self.goal_sid_right]
 
         self.obs_dict["palm_pos_l"] = self.sim.data.site_xpos[self.palm_l]
-        self.obs_dict['fin0_l'] = self.sim.data.site_xpos[self.fin0]
-        self.obs_dict['fin1_l'] = self.sim.data.site_xpos[self.fin1]
-        self.obs_dict['fin2_l'] = self.sim.data.site_xpos[self.fin2]
-        self.obs_dict['fin3_l'] = self.sim.data.site_xpos[self.fin3]
-        self.obs_dict['fin4_l'] = self.sim.data.site_xpos[self.fin4]
+        self.obs_dict['fin0_l'] = self.sim.data.site_xpos[self.fin0_l]
+        self.obs_dict['fin1_l'] = self.sim.data.site_xpos[self.fin1_l]
+        self.obs_dict['fin2_l'] = self.sim.data.site_xpos[self.fin2_l]
+        self.obs_dict['fin3_l'] = self.sim.data.site_xpos[self.fin3_l]
+        self.obs_dict['fin4_l'] = self.sim.data.site_xpos[self.fin4_l]
+
+        self.obs_dict["palm_pos_r"] = self.sim.data.site_xpos[self.palm_l]
+        self.obs_dict['fin0'] = self.sim.data.site_xpos[self.fin0]
+        self.obs_dict['fin1'] = self.sim.data.site_xpos[self.fin1]
+        self.obs_dict['fin2'] = self.sim.data.site_xpos[self.fin2]
+        self.obs_dict['fin3'] = self.sim.data.site_xpos[self.fin3]
+        self.obs_dict['fin4'] = self.sim.data.site_xpos[self.fin4]
 
         # self.obs_dict["rail_bottom_right"] = self.sim.data.site_xpos[self.rail_bottom_right]
 
         self.obs_dict['wheel_angle'] = np.array([self.sim.data.qpos[self.wheel_joint_id]])
+        self.obs_dict['wheel_angle_l'] = np.array([self.sim.data.qpos[self.wheel_joint_id_l]])
         # self.obs_dict["task_phase"] = np.array([1.0 if self.task_phase == "push" else -1.0])
 
         #calculate palm from target distance
-        self.obs_dict['hand_err'] = self.sim.data.site_xpos[self.palm_l]- self.sim.data.site_xpos[self.hand_TARGET_left]
+        self.obs_dict['hand_err'] = self.sim.data.site_xpos[self.palm_r]- self.sim.data.site_xpos[self.hand_TARGET_right]
+
+        self.obs_dict['hand_err_l'] = self.sim.data.site_xpos[self.palm_l]- self.sim.data.site_xpos[self.hand_TARGET_left]
+
 
         #calculate palm to return position
-        self.obs_dict['return_err'] = self.sim.data.site_xpos[self.palm_l]- self.sim.data.site_xpos[self.hand_start_left]
+        self.obs_dict['return_err'] = self.sim.data.site_xpos[self.palm_r]- self.sim.data.site_xpos[self.hand_start_right]
+
+        self.obs_dict['return_err_left'] = self.sim.data.site_xpos[self.palm_l]- self.sim.data.site_xpos[self.hand_start_left]
+
 
         if self.sim.model.na>0:
             self.obs_dict['act'] = self.sim.data.act[:].copy()
@@ -124,26 +179,43 @@ class WheelHoldFixedEnvV0Left(BaseV0):
         obs_dict['hand_qpos'] = sim.data.qpos[13:].copy()
         obs_dict['hand_qvel'] = sim.data.qvel[12:].copy()*self.dt
 
+        obs_dict['hand_qpos_l'] = sim.data.qpos[13:].copy()
+        obs_dict['hand_qvel_l'] = sim.data.qvel[12:].copy()*self.dt
+
         # obs_dict['wheel_err_right'] = sim.data.site_xpos[self.goal_sid_right] - sim.data.site_xpos[self.palm_r]
         # obs_dict['hand_initpos_err_right'] = sim.data.site_xpos[self.hand_start_right]- sim.data.site_xpos[self.goal_sid_right]
         
         obs_dict["palm_pos_l"] = sim.data.site_xpos[self.palm_l]
-        obs_dict['fin0_l'] = sim.data.site_xpos[self.fin0]
-        obs_dict['fin1_l'] = sim.data.site_xpos[self.fin1]
-        obs_dict['fin2_l'] = sim.data.site_xpos[self.fin2]
-        obs_dict['fin3_l'] = sim.data.site_xpos[self.fin3]
-        obs_dict['fin4_l'] = sim.data.site_xpos[self.fin4]
+        obs_dict['fin0_l'] = sim.data.site_xpos[self.fin0_l]
+        obs_dict['fin1_l'] = sim.data.site_xpos[self.fin1_l]
+        obs_dict['fin2_l'] = sim.data.site_xpos[self.fin2_l]
+        obs_dict['fin3_l'] = sim.data.site_xpos[self.fin3_l]
+        obs_dict['fin4_l'] = sim.data.site_xpos[self.fin4_l]
+
+        obs_dict["palm_pos_r"] = sim.data.site_xpos[self.palm_r]
+        obs_dict['fin0'] = sim.data.site_xpos[self.fin0]
+        obs_dict['fin1'] = sim.data.site_xpos[self.fin1]
+        obs_dict['fin2'] = sim.data.site_xpos[self.fin2]
+        obs_dict['fin3'] = sim.data.site_xpos[self.fin3]
+        obs_dict['fin4'] = sim.data.site_xpos[self.fin4]
 
         # obs_dict["rail_bottom_right"] = sim.data.site_xpos[self.rail_bottom_right]
         obs_dict['wheel_angle'] = np.array([sim.data.qpos[self.wheel_joint_id]])
+        obs_dict['wheel_angle_l'] = np.array([sim.data.qpos[self.wheel_joint_id_l]])
+
 
         # obs_dict["task_phase"] = np.array([1.0 if self.task_phase == "push" else -1.0])
 
         #calculate palm from target distance
-        obs_dict['hand_err'] = self.sim.data.site_xpos[self.palm_l]- self.sim.data.site_xpos[self.hand_TARGET_left]
+        obs_dict['hand_err'] = self.sim.data.site_xpos[self.palm_r]- self.sim.data.site_xpos[self.hand_TARGET_right]
+
+        obs_dict['hand_err_l'] = self.sim.data.site_xpos[self.palm_l]- self.sim.data.site_xpos[self.hand_TARGET_left]
 
         #calculate palm to return position
-        obs_dict['return_err'] = self.sim.data.site_xpos[self.palm_l]- self.sim.data.site_xpos[self.hand_start_left]
+        obs_dict['return_err'] = self.sim.data.site_xpos[self.palm_r]- self.sim.data.site_xpos[self.hand_start_right]
+
+        obs_dict['return_err_l'] = self.sim.data.site_xpos[self.palm_l]- self.sim.data.site_xpos[self.hand_start_left]
+
 
         if sim.model.na>0:
             obs_dict['act'] = sim.data.act[:].copy()
@@ -155,9 +227,10 @@ class WheelHoldFixedEnvV0Left(BaseV0):
         # dist_right = np.linalg.norm(obs_dict['wheel_err_right']) 
 
         # CHECK IF PALM TOUCHING WHEEL
-        palm_body_id = self.sim.model.body_name2id("thirdmcL")
-        rail_body_id = self.sim.model.body_name2id("left_handrail")
+        palm_body_id = self.sim.model.body_name2id("thirdmc")
+        rail_body_id = self.sim.model.body_name2id("right_handrail")
         palm_touching_rail = False
+        
         for i in range(self.sim.data.ncon):
             con = self.sim.data.contact[i]
             body1 = self.sim.model.geom_bodyid[con.geom1]
@@ -166,37 +239,69 @@ class WheelHoldFixedEnvV0Left(BaseV0):
                 (body2 == palm_body_id and body1 == rail_body_id)):
                 palm_touching_rail = True
                 break
+        
+        palm_body_id_l = self.sim.model.body_name2id("thirdmcL")
+        rail_body_id_l = self.sim.model.body_name2id("left_handrail")
+        palm_touching_rail_l = False
+        for i in range(self.sim.data.ncon):
+            con = self.sim.data.contact[i]
+            body1 = self.sim.model.geom_bodyid[con.geom1]
+            body2 = self.sim.model.geom_bodyid[con.geom2]
+            if ((body1 == palm_body_id_l and body2 == rail_body_id_l) or
+                (body2 == palm_body_id_l and body1 == rail_body_id_l)):
+                palm_touching_rail_l = True
+                break
+
         ### SPARSE reward for palm touching rail ###
         palm_touch_rwd = 5.0 if palm_touching_rail else 0.0
+        palm_touch_rwd_l = 5.0 if palm_touching_rail_l else 0.0
 
         ### DENSE reward for palm close to rail ###
         rail_center_pos = self.sim.data.body_xpos[rail_body_id]
+        rail_center_pos_l = self.sim.data.body_xpos[rail_body_id_l]
         # Distance from palm to the rail *surface*
-        palm_to_rail_surface_dist = max(0.0, np.linalg.norm(obs_dict["palm_pos_l"] - rail_center_pos) - 0.277)
+        palm_to_rail_surface_dist = max(0.0, np.linalg.norm(obs_dict["palm_pos_r"] - rail_center_pos) - 0.277)
+        palm_to_rail_surface_dist_l = max(0.0, np.linalg.norm(obs_dict["palm_pos_l"] - rail_center_pos) - 0.277)
+        
         # Reward: higher when palm is closer to the surface
         dist_reward = np.exp(-10.0 * palm_to_rail_surface_dist)
+        dist_reward_l = np.exp(-10.0 * palm_to_rail_surface_dist)
 
         # calculate wheel rotation, just want it as big and negative as possible
         wheel_angle_now = self.sim.data.qpos[self.wheel_joint_id]
         wheel_rotation = -1*(wheel_angle_now - self.init_wheel_angle) #rotate cw? I think?
 
+        wheel_angle_now_l = self.sim.data.qpos[self.wheel_joint_id_l]
+        wheel_rotation_l = -1*(wheel_angle_now - self.init_wheel_angle_l) #rotate cw? I think?
+
+
         # minimize muscle activation for realism
         act_mag = np.linalg.norm(self.obs_dict['act'], axis=-1)/self.sim.model.na if self.sim.model.na !=0 else 0
 
         # gripping, minimize distance between palm and fingertips
-        fin_keys = ['fin0_l', 'fin1_l', 'fin2_l', 'fin3_l', 'fin4_l']
+        fin_keys = ['fin0', 'fin1', 'fin2', 'fin3', 'fin4']
         fin_open = sum(
-            np.linalg.norm(obs_dict[fin].squeeze() - obs_dict['palm_pos_l'].squeeze(), axis=-1)
+            np.linalg.norm(obs_dict[fin].squeeze() - obs_dict['palm_pos_r'].squeeze(), axis=-1)
             for fin in fin_keys
         )
 
+        fin_keys_l = ['fin0_l', 'fin1_l', 'fin2_l', 'fin3_l', 'fin4_l']
+        fin_open_l = sum(
+            np.linalg.norm(obs_dict[fin].squeeze() - obs_dict['palm_pos_l'].squeeze(), axis=-1)
+            for fin in fin_keys_l
+        )
+
         # ELBOW JOINT VALUE
         elbow_now = self.sim.data.qpos[self.elbow_joint_id]
+        elbow_now_l = self.sim.data.qpos[self.elbow_joint_id_l]
 
         #errs
         hand_err = np.linalg.norm(obs_dict["hand_err"])
         return_err = np.linalg.norm(obs_dict["return_err"])
 
+        hand_err_l = np.linalg.norm(obs_dict["hand_err_l"])
+        return_err_l = np.linalg.norm(obs_dict["return_err_l"])
+
         # === Compute reward based on phase ===
         if self.task_phase == "push":
             rwd_dict = collections.OrderedDict((
@@ -212,10 +317,18 @@ class WheelHoldFixedEnvV0Left(BaseV0):
                 ('sparse', 0),
                 ('solved', 0),
                 ('done', 0),
+                ('return_rwd_l', 0),
+                ('hand_err_rwd_l', math.exp(-20.0 * abs(hand_err_l))),
+                ('dist_reward_l', dist_reward_l),
+                ('palm_touch_rwd_l', palm_touch_rwd_l),
+                ('wheel_rotation_l', 15.0 * wheel_rotation_l),
+                ('fin_open_l', np.exp(-5.0 * fin_open_l)),
+                ('bonus_l', 1.0 * (wheel_angle_now_l < self.init_wheel_angle_l)),
+                ('penalty_l', -1.0 * (wheel_angle_now_l > self.init_wheel_angle_l)),
                 # ('solved', wheel_rotation < -500.0),
                 # ('done', wheel_rotation > 500.0),
             ))
-            if hand_err < 0.005 and elbow_now < 0.74:
+            if hand_err < 0.005 and elbow_now < 0.7 and hand_err_l < 0.005 and elbow_now_l < 0.7 :
                 print("returning")
                 self.task_phase = "return"
 
@@ -233,10 +346,18 @@ class WheelHoldFixedEnvV0Left(BaseV0):
                 ('sparse', return_err < 0.025),
                 ('solved', 0),
                 ('done', 0),
+                ('return_rwd_l', math.exp(-20.0 * abs(return_err_l))),
+                ('hand_err_rwd_l', 0),
+                ('dist_reward_l', 0.5*dist_reward_l),
+                ('palm_touch_rwd_l', 0),
+                ('wheel_rotation_l', 0),
+                ('fin_open_l', np.exp(fin_open_l)),
+                ('bonus_l', 0),
+                ('penalty_l', 0),
                 # ('solved', return_err < 0.0025),
                 # ('done', return_err > 50.0),
             ))
-            if return_err < 0.005 and elbow_now > 1.0:
+            if return_err_l < 0.005 and elbow_now_l > 1.0 and return_err < 0.005 and elbow_now > 1.0:
                 print("return successful, pushing again")
                 self.task_phase = "push"
 
Submodule myosuite/simhive/myo_sim 7229045..a5f52d8:
diff --git a/myosuite/simhive/myo_sim/wheelchair/assets/myowheelchair_chain.xml b/myosuite/simhive/myo_sim/wheelchair/assets/myowheelchair_chain.xml
index c2d8ddf..df79631 100644
--- a/myosuite/simhive/myo_sim/wheelchair/assets/myowheelchair_chain.xml
+++ b/myosuite/simhive/myo_sim/wheelchair/assets/myowheelchair_chain.xml
@@ -21,28 +21,33 @@
             <geom mesh= "rear_wheel1" pos="0.0635 0.5842 0.1524" material="dark_grey" conaffinity="0" contype="0"/>
             <geom name = "left_rear_coll" type="cylinder" size="0.3048" fromto="-0.0127 0 0 0.0127 0 0" rgba="1 0 0 0"/>
             <!-- <geom name = "left_handrail_coll" type="cylinder" pos = "-0.038 0 0" size="0.2762 0.0082" euler="0 1.5708 0" rgba="0 0 1 0"/> -->
-            <geom mesh="handrail_coll1" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll2" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll3" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll4" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll5" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll6" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll7" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll8" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll9" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll10" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll11" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll12" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll13" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll14" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll15" pos="-0.0371 0 0" rgba="0 0 1 0"/>
-            <geom mesh="handrail_coll16" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+            <body name = "left_handrail" pos="0 0 0">
+                <geom mesh="handrail_coll1" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll2" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll3" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll4" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll5" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll6" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll7" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll8" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll9" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll10" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll11" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll12" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll13" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll14" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll15" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+                <geom mesh="handrail_coll16" pos="-0.0371 0 0" rgba="0 0 1 0"/>
+            </body>  
             <!-- <site name="wheel" size="0.005"/>  -->
             <site name="wheelchair_grip_left" pos="-0.0371 0.27 0.05" size="0.005" rgba="0 1 0 0.5"/>
         </body>
         <site name="hand_start_right" pos="0.5324 -0.3142 -0.1024" size="0.008" rgba="1 0 0 1"/>
         <site name="hand_TARGET_right" pos="0.5324 -0.4542 -0.395" size="0.008" rgba="0 0 1 1"/>
 
+        <site name="hand_start_left" pos="-0.101 -0.3142 -0.1024" size="0.008" rgba="1 0 0 1"/>
+        <site name="hand_TARGET_left" pos="-0.101 -0.4542 -0.395" size="0.008" rgba="0 0 1 1"/>
+
         <body name = "right_rear_wheel" pos="0.4953 -0.5842 -0.1524">
             <joint name= "right_rear" axis="-1 0 0" damping=".03"/>
             <geom mesh= "rear_wheel2" pos="-0.4953 0.5842 0.1524" material="dark_grey" conaffinity="0" contype="0"/>
@@ -70,6 +75,8 @@
             <site name="wheelchair_grip_right" pos="0.0371 0.27 0.05" size="0.005" rgba="0 1 0 1"/>
             <site name="rail_bottom_right" pos="0.0371 0.25 0.05" size="0.005" rgba="0 0 1 1"/>
 
+            <site name="rail_bottom_left" pos="-0.0371 0.25 0.05" size="0.005" rgba="0 0 1 1"/>
+            
             <!-- <geom type = "sphere" pos="0.0371 0.27 0.05" size = "0.008" rgba="1 0 0 1"/> -->
         </body>
         
diff --git a/wandb/latest-run b/wandb/latest-run
index e3c5944..5f95254 120000
--- a/wandb/latest-run
+++ b/wandb/latest-run
@@ -1 +1 @@
-run-20250729_141526-r7uwm2qj
\ No newline at end of file
+run-20250729_153139-7r6adctj
\ No newline at end of file
